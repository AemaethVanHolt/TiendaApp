@model TiendaApp.Models.Producto

@{
    ViewData["Title"] = "Detalles del Producto";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            @if (!string.IsNullOrEmpty(Model.ImagenUrl))
            {
                <img src="@Model.ImagenUrl" class="img-fluid rounded" alt="@Model.Nombre">
            }
            else
            {
                <div class="bg-light d-flex align-items-center justify-content-center" style="height: 300px;">
                    <span class="text-muted">Imagen no disponible</span>
                </div>
            }
        </div>
        <div class="col-md-6">
            <h1>@Model.Nombre</h1>
            <p class="h3 text-primary mb-3">@Model.Precio.ToString("C")</p>
            
            <div class="mb-4">
                @if (!string.IsNullOrEmpty(Model.Tipo))
                {
                    <p class="mb-2">
                        <strong>Categoría:</strong> <span class="badge bg-secondary">@Model.Tipo</span>
                    </p>
                }
                
                @if (Model.Stock > 0)
                {
                    <p class="text-success mb-2">
                        <i class="fas fa-check-circle"></i> En stock (@Model.Stock disponibles)
                    </p>
                }
                else
                {
                    <p class="text-danger mb-2">
                        <i class="fas fa-times-circle"></i> Agotado
                    </p>
                }
                
                <p class="text-muted small mb-0">
                    <strong>Fecha de publicación:</strong> @Model.FechaCreacion.ToString("d MMMM yyyy")
                    @if (Model.FechaModificacion > Model.FechaCreacion)
                    {
                        <br/><strong>Última actualización:</strong> @Model.FechaModificacion.ToString("d MMMM yyyy")
                    }
                </p>
            </div>
            
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">Descripción del producto</h5>
                    <p class="card-text">@Model.Descripcion</p>
                </div>
            </div>
            
            <div class="d-flex gap-2">
                @if (User.Identity?.IsAuthenticated == true)
                {
                    @if (Model.Stock > 0)
                    {
                        <form method="post" asp-controller="Carrito" asp-action="AgregarAlCarrito" class="add-to-cart-form d-inline">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="productoId" value="@Model.Id" />
                            <input type="hidden" name="cantidad" value="1" />
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-shopping-cart"></i> Añadir al carrito
                            </button>
                        </form>
                    }
                    <a href="/Tienda" class="btn btn-outline-secondary">Seguir comprando</a>
                }
                else
                {
                    <a href="/Identity/Account/Login" class="btn btn-primary">Inicia sesión para comprar</a>
                    <a href="/Tienda" class="btn btn-outline-secondary">Volver a la tienda</a>
                }
                
                @if (User.IsInRole("Administrador"))
                {
                    <a href="/Productos/Edit/@Model.Id" class="btn btn-outline-warning">
                        <i class="fas fa-edit"></i> Editar
                    </a>
                }
            </div>
        </div>
    </div>
    
    <div class="mt-5">
        <h4>Productos relacionados</h4>
        <div class="row row-cols-1 row-cols-md-4 g-4" id="related-products">
            <!-- Los productos relacionados se cargarán aquí mediante JavaScript -->
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Función para actualizar el contador del carrito
        function updateCartCount() {
            fetch('/Carrito/GetCount')
                .then(response => response.json())
                .then(data => {
                    const cartCount = document.getElementById('cart-count');
                    if (cartCount) {
                        cartCount.textContent = data.count;
                        cartCount.classList.toggle('d-none', data.count === 0);
                    }
                });
        }

        // Función para mostrar notificaciones toast
        function showToast(message, type = 'info') {
            // Crear el contenedor del toast si no existe
            let toastContainer = document.getElementById('toast-container');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toast-container';
                toastContainer.style.position = 'fixed';
                toastContainer.style.top = '20px';
                toastContainer.style.right = '20px';
                toastContainer.style.zIndex = '9999';
                document.body.appendChild(toastContainer);
            }
            
            // Crear el toast
            const toast = document.createElement('div');
            toast.className = `toast show align-items-center text-white bg-${type} border-0`;
            toast.role = 'alert';
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            // Contenido del toast
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
            
            // Agregar el toast al contenedor
            toastContainer.appendChild(toast);
            
            // Eliminar el toast después de 3 segundos
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => {
                    toast.remove();
                }, 300);
            }, 3000);
        }
        
        // Inicializar tooltips y cargar productos relacionados
        document.addEventListener('DOMContentLoaded', function() {
            // Actualizar el contador del carrito al cargar la página
            updateCartCount();
            
            // Configurar tooltips de Bootstrap
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Mostrar mensajes del servidor
            @if (TempData["SuccessMessage"] is string successMessage)
            {
                <text>showToast('@Html.Raw(successMessage)', 'success');</text>
            }
            
            @if (TempData["ErrorMessage"] is string errorMessage)
            {
                <text>showToast('@Html.Raw(errorMessage)', 'danger');</text>
            }

            // Cargar productos relacionados
            fetch('/api/productos/relacionados?productoId=@Model.Id')
                .then(response => response.json())
                .then(products => {
                    const container = document.getElementById('related-products');
                    if (products.length === 0) {
                        container.innerHTML = '<p>No hay productos relacionados disponibles.</p>';
                        return;
                    }
                    
                    products.forEach(product => {
                        const productHtml = `
                            <div class="col">
                                <div class="card h-100">
                                    ${product.imagenUrl ? 
                                        `<img src="${product.imagenUrl}" class="card-img-top" alt="${product.nombre}" style="height: 150px; object-fit: cover;">` : 
                                        '<div class="bg-light d-flex align-items-center justify-content-center" style="height: 150px;">' +
                                        '<span class="text-muted">Sin imagen</span></div>'}
                                    <div class="card-body">
                                        <h5 class="card-title">${product.nombre}</h5>
                                        <p class="card-text text-primary">${product.precio} €</p>
                                    </div>
                                    <div class="card-footer bg-transparent">
                                        <a href="/Tienda/Details/${product.id}" class="btn btn-sm btn-outline-primary">Ver detalles</a>
                                    </div>
                                </div>
                            </div>
                        `;
                        container.insertAdjacentHTML('beforeend', productHtml);
                    });
                })
                .catch(error => {
                    console.error('Error al cargar productos relacionados:', error);
                    document.getElementById('related-products').innerHTML = 
                        '<p class="text-muted">No se pudieron cargar los productos relacionados.</p>';
                });
        });
    </script>
}